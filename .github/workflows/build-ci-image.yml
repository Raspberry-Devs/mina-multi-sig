# This workflow builds a Docker image with pre-installed dependencies for FROST examples.
#
# This workflow runs:
# - Weekly (to get latest security updates)
# - You manually trigger it on GH actions (with latest label from main and pr specific label if made from branch)
# - You push changes to the image to main

name: Build CI Image

on:
  workflow_dispatch: # Allow for manual dispatch
  schedule:
    - cron: "0 2 * * 0" # Weekly rebuild on Sundays at 2 AM to get latest deps
  push:
    branches: ["main"]
    paths: [".docker/frost-ci.Dockerfile"] # Also trigger when this workflow changes

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: raspberry-devs/mina-multi-sig/frost-ci

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Get the source code including the Dockerfile
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate with GitHub Container Registry using the built-in token
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate appropriate tags and labels for the Docker image
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      # Set up Docker Buildx for advanced building features (caching, multi-platform)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build the Docker image with FROST dependencies and push to registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/frost-ci.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

#!/bin/bash

# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
GENERATED_DIR="$SCRIPT_DIR/generated"
TRUSTED_DEALER_DIR="$SCRIPT_DIR/../trusted_dealer_example/generated"

# Default server URL
SERVER_URL="localhost:2744"
SERVER_PID=""

# Function to cleanup on exit
cleanup() {
    echo "Cleaning up..."
    if [ ! -z "$SERVER_PID" ] && kill -0 "$SERVER_PID" 2>/dev/null; then
        echo "Stopping frostd server (PID: $SERVER_PID)..."
        kill "$SERVER_PID"
        wait "$SERVER_PID" 2>/dev/null
    fi
    exit
}

# Set up cleanup trap
trap cleanup EXIT INT TERM

echo "========================================="
echo "FROST Signing Example"
echo "========================================="
echo "This example demonstrates the FROST signing process using"
echo "keys generated by the trusted dealer example."
echo ""

# Check if trusted dealer keys exist
if [ ! -d "$TRUSTED_DEALER_DIR" ]; then
    echo "ERROR: Trusted dealer keys not found!"
    echo "Please run the trusted dealer example first:"
    echo "  cd ../trusted_dealer_example && ./trusted_dealer_example.sh"
    exit 1
fi

if [ ! -f "$TRUSTED_DEALER_DIR/alice.toml" ] || [ ! -f "$TRUSTED_DEALER_DIR/bob.toml" ] || [ ! -f "$TRUSTED_DEALER_DIR/eve.toml" ]; then
    echo "ERROR: Trusted dealer config files not found!"
    echo "Please run the trusted dealer example first to generate the key shares."
    exit 1
fi

# Clean up generated directory if it exists
if [ -d "$GENERATED_DIR" ]; then
    echo "Cleaning up existing generated directory..."
    rm -rf "$GENERATED_DIR"
fi

# Create directory for generated files
mkdir -p "$GENERATED_DIR"

# Copy trusted dealer configs to our working directory
echo "Copying trusted dealer configurations..."
cp "$TRUSTED_DEALER_DIR/alice.toml" "$GENERATED_DIR/"
cp "$TRUSTED_DEALER_DIR/bob.toml" "$GENERATED_DIR/"
cp "$TRUSTED_DEALER_DIR/eve.toml" "$GENERATED_DIR/"

# Setting up the TLS certificates
echo "Setting up TLS certificates..."
cd "$GENERATED_DIR"
mkcert localhost 127.0.0.1 ::1 2>/dev/null || {
    echo "ERROR: mkcert failed. Please install mkcert first:"
    echo "  # On Ubuntu/Debian:"
    echo "  sudo apt install mkcert"
    echo "  # On macOS:"
    echo "  brew install mkcert"
    echo "  Also ensure you have run 'mkcert -install' to set up the local CA."
    exit 1
}
cd ..

echo ""
echo "========================================="
echo "Starting frostd server"
echo "========================================="

# Check if frostd is installed
if ! command -v frostd &> /dev/null; then
    echo "ERROR: frostd is not installed or not in PATH!"
    echo ""
    echo "Please install frostd first. You can build it from the FROST server repository:"
    echo "  cargo install --git https://github.com/ZcashFoundation/frost-zcash-demo.git --locked frostd"
    exit 1
fi

# Start frostd server in the background
echo "Starting frostd server on $SERVER_URL..."
echo "Using TLS cert: $GENERATED_DIR/localhost+2.pem"
echo "Using TLS key: $GENERATED_DIR/localhost+2-key.pem"
frostd --tls-cert "$GENERATED_DIR/localhost+2.pem" --tls-key "$GENERATED_DIR/localhost+2-key.pem" &
SERVER_PID=$!
echo "Server PID: $SERVER_PID"

# Wait for the server to start
sleep 3
echo "frostd server started with PID: $SERVER_PID"

echo ""
echo "========================================="
echo "Checking group information"
echo "========================================="

# Check groups for Alice (they should all have the same group)
echo "Checking Alice's groups..."
ALICE_GROUPS=$(cargo run --bin frost-client groups -c "$GENERATED_DIR/alice.toml" 2>&1)
echo "Alice ggg: $ALICE_GROUPS"

# Extract the group public key (first group's public key)
GROUP_PUBLIC_KEY=$(echo "$ALICE_GROUPS" | grep -o "Public key [a-f0-9]*" | head -1 | cut -d' ' -f3)
if [ -z "$GROUP_PUBLIC_KEY" ]; then
    echo "ERROR: Could not extract group public key from Alice's groups!"
    echo "Make sure the trusted dealer example was run successfully."
    exit 1
fi

echo ""
echo "Group public key: $GROUP_PUBLIC_KEY"

echo ""
echo "========================================="
echo "Generating message to sign"
echo "========================================="

# Create a test message to sign
TEST_MESSAGE="Hello, FROST signing world! This is a test message for the signing example."
echo "Message to sign: $TEST_MESSAGE"

# Save message to file for coordinator
echo -n "$TEST_MESSAGE" > "$GENERATED_DIR/message.txt"

echo ""
echo "========================================="
echo "Starting FROST signing process"
echo "========================================="
echo "This will demonstrate a 2-of-3 threshold signature."
echo "Alice will act as the coordinator, and Bob and Eve will participate."
echo ""

# Get Alice's public key for coordination
ALICE_CONTACTS=$(cargo run --bin frost-client contacts -c "$GENERATED_DIR/alice.toml" 2>&1)
ALICE_PUBLIC_KEY=$(echo "$ALICE_CONTACTS" | grep -A1 "Name: Alice" | grep "Public Key:" | cut -d' ' -f3 || echo "")

# Get Bob's public key
BOB_PUBLIC_KEY=$(echo "$ALICE_CONTACTS" | grep -A1 "Name: Bob" | grep "Public Key:" | cut -d' ' -f3)

# Get Eve's public key  
EVE_PUBLIC_KEY=$(echo "$ALICE_CONTACTS" | grep -A1 "Name: Eve" | grep "Public Key:" | cut -d' ' -f3)

echo "Alice's public key: $ALICE_PUBLIC_KEY"
echo "Bob's public key: $BOB_PUBLIC_KEY"
echo "Eve's public key: $EVE_PUBLIC_KEY"

if [ -z "$BOB_PUBLIC_KEY" ] || [ -z "$EVE_PUBLIC_KEY" ]; then
    echo "ERROR: Could not extract participant public keys!"
    echo "The trusted dealer example may not have been run correctly."
    exit 1
fi

echo ""
echo "========================================="
echo "Step 1: Alice starts as coordinator"
echo "========================================="

# Alice acts as coordinator - signs with Bob and Eve (2-of-3 threshold)
echo "Alice starting coordinator process..."
cargo run --bin frost-client -- coordinator \
    -c "$GENERATED_DIR/alice.toml" \
    --server-url "$SERVER_URL" \
    --group "$GROUP_PUBLIC_KEY" \
    -S "$BOB_PUBLIC_KEY,$EVE_PUBLIC_KEY" \
    -m "$GENERATED_DIR/message.txt" \
    -o "$GENERATED_DIR/signature.hex" &
COORDINATOR_PID=$!

# Wait for coordinator to start
sleep 5

echo ""
echo "========================================="
echo "Step 2: Bob joins as participant"
echo "========================================="

echo "Bob joining the signing session..."
echo "y" | cargo run --bin frost-client -- participant \
    -c "$GENERATED_DIR/bob.toml" \
    --server-url "$SERVER_URL" \
    --group "$GROUP_PUBLIC_KEY" &
BOB_PID=$!

# Wait a moment
sleep 3

echo ""
echo "========================================="
echo "Step 3: Eve joins as participant"
echo "========================================="

echo "Eve joining the signing session..."
echo "y" | cargo run --bin frost-client -- participant \
    -c "$GENERATED_DIR/eve.toml" \
    --server-url "$SERVER_URL" \
    --group "$GROUP_PUBLIC_KEY" &
EVE_PID=$!

echo ""
echo "========================================="
echo "Waiting for signing process to complete"
echo "========================================="

# Wait for all processes to complete
echo "Waiting for coordinator to complete..."
wait $COORDINATOR_PID
COORDINATOR_EXIT=$?

echo "Waiting for Bob to complete..."
wait $BOB_PID
BOB_EXIT=$?

echo "Waiting for Eve to complete..."
wait $EVE_PID
EVE_EXIT=$?

echo ""
echo "========================================="
echo "Signing Results"
echo "========================================="

# Check if signing completed successfully
if [ $COORDINATOR_EXIT -eq 0 ] && [ $BOB_EXIT -eq 0 ] && [ $EVE_EXIT -eq 0 ]; then
    echo "✅ FROST signing completed successfully!"
    echo ""
    echo "Original message: $TEST_MESSAGE"
    echo ""
    
    if [ -f "$GENERATED_DIR/signature.hex" ]; then
        SIGNATURE=$(cat "$GENERATED_DIR/signature.hex")
        echo "Generated signature: $SIGNATURE"
        echo ""
        echo "Signature saved to: $GENERATED_DIR/signature.hex"
    else
        echo "⚠️  Signature file not found, but processes completed successfully."
    fi
    
    echo ""
    echo "========================================="
    echo "Signature verification"
    echo "========================================="
    echo "Group public key: $GROUP_PUBLIC_KEY"
    echo "This signature can be verified using the group public key"
    echo "against the original message using standard signature verification."
    echo ""
    echo "Files generated:"
    echo "  - $GENERATED_DIR/message.txt (original message)"
    echo "  - $GENERATED_DIR/signature.hex (FROST signature)"
    echo "  - $GENERATED_DIR/alice.toml (Alice's config)"
    echo "  - $GENERATED_DIR/bob.toml (Bob's config)"
    echo "  - $GENERATED_DIR/eve.toml (Eve's config)"
    
else
    echo "❌ FROST signing process failed!"
    echo "Exit codes: Coordinator=$COORDINATOR_EXIT, Bob=$BOB_EXIT, Eve=$EVE_EXIT"
    exit 1
fi